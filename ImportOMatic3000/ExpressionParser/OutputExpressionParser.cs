//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ExpressionParser/OutputExpression.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class OutputExpressionParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, NUMBER=19, STRING=20, DATE=21, TRUE=22, FALSE=23, IDENTIFIER=24, 
		WHITESPACE=25;
	public const int
		RULE_expr = 0, RULE_ifexpr = 1, RULE_function = 2, RULE_literal = 3, RULE_field = 4;
	public static readonly string[] ruleNames = {
		"expr", "ifexpr", "function", "literal", "field"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'-'", "'('", "')'", "'*'", "'/'", "'+'", "'<'", "'>'", "'<='", 
		"'>='", "'='", "'!='", "'&'", "'|'", "'If('", "','", "'()'", null, null, 
		null, "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, "NUMBER", "STRING", "DATE", 
		"TRUE", "FALSE", "IDENTIFIER", "WHITESPACE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "OutputExpression.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static OutputExpressionParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public OutputExpressionParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public OutputExpressionParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IfExpressionContext : ExprContext {
		public IfexprContext ifexpr() {
			return GetRuleContext<IfexprContext>(0);
		}
		public IfExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LiteralExpressionContext : ExprContext {
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteralExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BracketedExpressionContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public BracketedExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBracketedExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NotExpressionContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNotExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OrExpressionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public OrExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FieldExpressionContext : ExprContext {
		public FieldContext field() {
			return GetRuleContext<FieldContext>(0);
		}
		public FieldExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NegateExpressionContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NegateExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNegateExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubExpressionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AddSubExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSubExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ComparisonExpressionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ComparisonExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitComparisonExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FunctionExpressionContext : ExprContext {
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AndExpressionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public AndExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAndExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class EqualityExpressionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public EqualityExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEqualityExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivExpressionContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public MulDivExpressionContext(ExprContext context) { CopyFrom(context); }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(Context, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 23;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				_localctx = new IfExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 11; ifexpr();
				}
				break;
			case 2:
				{
				_localctx = new FunctionExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 12; function();
				}
				break;
			case 3:
				{
				_localctx = new LiteralExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 13; literal();
				}
				break;
			case 4:
				{
				_localctx = new FieldExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 14; field();
				}
				break;
			case 5:
				{
				_localctx = new NotExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 15; Match(T__0);
				State = 16; expr(9);
				}
				break;
			case 6:
				{
				_localctx = new NegateExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 17; Match(T__1);
				State = 18; expr(8);
				}
				break;
			case 7:
				{
				_localctx = new BracketedExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 19; Match(T__2);
				State = 20; expr(0);
				State = 21; Match(T__3);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 45;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 43;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
					case 1:
						{
						_localctx = new MulDivExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 25;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 26;
						_la = TokenStream.LA(1);
						if ( !(_la==T__4 || _la==T__5) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 27; expr(7);
						}
						break;
					case 2:
						{
						_localctx = new AddSubExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 28;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 29;
						_la = TokenStream.LA(1);
						if ( !(_la==T__1 || _la==T__6) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 30; expr(6);
						}
						break;
					case 3:
						{
						_localctx = new ComparisonExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 31;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 32;
						_la = TokenStream.LA(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 33; expr(5);
						}
						break;
					case 4:
						{
						_localctx = new EqualityExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 34;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 35;
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 36; expr(4);
						}
						break;
					case 5:
						{
						_localctx = new AndExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 37;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 38; Match(T__13);
						State = 39; expr(3);
						}
						break;
					case 6:
						{
						_localctx = new OrExpressionContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 40;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 41; Match(T__14);
						State = 42; expr(2);
						}
						break;
					}
					} 
				}
				State = 47;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IfexprContext : ParserRuleContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public IfexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifexpr; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfexpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfexprContext ifexpr() {
		IfexprContext _localctx = new IfexprContext(Context, State);
		EnterRule(_localctx, 2, RULE_ifexpr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; Match(T__15);
			State = 49; expr(0);
			State = 50; Match(T__16);
			State = 51; expr(0);
			State = 52; Match(T__16);
			State = 53; expr(0);
			State = 54; Match(T__3);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(OutputExpressionParser.IDENTIFIER, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 4, RULE_function);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 56; Match(IDENTIFIER);
				State = 57; Match(T__17);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58; Match(IDENTIFIER);
				State = 59; Match(T__2);
				State = 60; expr(0);
				State = 65;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__16) {
					{
					{
					State = 61; Match(T__16);
					State = 62; expr(0);
					}
					}
					State = 67;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 68; Match(T__3);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode NUMBER() { return GetToken(OutputExpressionParser.NUMBER, 0); }
		public ITerminalNode STRING() { return GetToken(OutputExpressionParser.STRING, 0); }
		public ITerminalNode DATE() { return GetToken(OutputExpressionParser.DATE, 0); }
		public ITerminalNode TRUE() { return GetToken(OutputExpressionParser.TRUE, 0); }
		public ITerminalNode FALSE() { return GetToken(OutputExpressionParser.FALSE, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 6, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << NUMBER) | (1L << STRING) | (1L << DATE) | (1L << TRUE) | (1L << FALSE))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(OutputExpressionParser.IDENTIFIER, 0); }
		public FieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IOutputExpressionVisitor<TResult> typedVisitor = visitor as IOutputExpressionVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitField(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldContext field() {
		FieldContext _localctx = new FieldContext(Context, State);
		EnterRule(_localctx, 8, RULE_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 74; Match(IDENTIFIER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 2);
		case 5: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1B', 'O', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x5', '\x2', 
		'\x1A', '\n', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 
		'.', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\x31', '\v', '\x2', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'\x42', '\n', '\x4', '\f', '\x4', '\xE', '\x4', '\x45', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x5', '\x4', 'I', '\n', '\x4', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\x4', '\x6', '\b', '\n', '\x2', '\a', '\x3', '\x2', '\a', 
		'\b', '\x4', '\x2', '\x4', '\x4', '\t', '\t', '\x3', '\x2', '\n', '\r', 
		'\x3', '\x2', '\xE', '\xF', '\x3', '\x2', '\x15', '\x19', '\x2', 'W', 
		'\x2', '\x19', '\x3', '\x2', '\x2', '\x2', '\x4', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x6', 'H', '\x3', '\x2', '\x2', '\x2', '\b', 'J', '\x3', 
		'\x2', '\x2', '\x2', '\n', 'L', '\x3', '\x2', '\x2', '\x2', '\f', '\r', 
		'\b', '\x2', '\x1', '\x2', '\r', '\x1A', '\x5', '\x4', '\x3', '\x2', '\xE', 
		'\x1A', '\x5', '\x6', '\x4', '\x2', '\xF', '\x1A', '\x5', '\b', '\x5', 
		'\x2', '\x10', '\x1A', '\x5', '\n', '\x6', '\x2', '\x11', '\x12', '\a', 
		'\x3', '\x2', '\x2', '\x12', '\x1A', '\x5', '\x2', '\x2', '\v', '\x13', 
		'\x14', '\a', '\x4', '\x2', '\x2', '\x14', '\x1A', '\x5', '\x2', '\x2', 
		'\n', '\x15', '\x16', '\a', '\x5', '\x2', '\x2', '\x16', '\x17', '\x5', 
		'\x2', '\x2', '\x2', '\x17', '\x18', '\a', '\x6', '\x2', '\x2', '\x18', 
		'\x1A', '\x3', '\x2', '\x2', '\x2', '\x19', '\f', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\xE', '\x3', '\x2', '\x2', '\x2', '\x19', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x10', '\x3', '\x2', '\x2', '\x2', '\x19', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x19', '\x13', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x15', '\x3', '\x2', '\x2', '\x2', '\x1A', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x1B', '\x1C', '\f', '\b', '\x2', '\x2', '\x1C', 
		'\x1D', '\t', '\x2', '\x2', '\x2', '\x1D', '.', '\x5', '\x2', '\x2', '\t', 
		'\x1E', '\x1F', '\f', '\a', '\x2', '\x2', '\x1F', ' ', '\t', '\x3', '\x2', 
		'\x2', ' ', '.', '\x5', '\x2', '\x2', '\b', '!', '\"', '\f', '\x6', '\x2', 
		'\x2', '\"', '#', '\t', '\x4', '\x2', '\x2', '#', '.', '\x5', '\x2', '\x2', 
		'\a', '$', '%', '\f', '\x5', '\x2', '\x2', '%', '&', '\t', '\x5', '\x2', 
		'\x2', '&', '.', '\x5', '\x2', '\x2', '\x6', '\'', '(', '\f', '\x4', '\x2', 
		'\x2', '(', ')', '\a', '\x10', '\x2', '\x2', ')', '.', '\x5', '\x2', '\x2', 
		'\x5', '*', '+', '\f', '\x3', '\x2', '\x2', '+', ',', '\a', '\x11', '\x2', 
		'\x2', ',', '.', '\x5', '\x2', '\x2', '\x4', '-', '\x1B', '\x3', '\x2', 
		'\x2', '\x2', '-', '\x1E', '\x3', '\x2', '\x2', '\x2', '-', '!', '\x3', 
		'\x2', '\x2', '\x2', '-', '$', '\x3', '\x2', '\x2', '\x2', '-', '\'', 
		'\x3', '\x2', '\x2', '\x2', '-', '*', '\x3', '\x2', '\x2', '\x2', '.', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', '\x2', 
		'/', '\x30', '\x3', '\x2', '\x2', '\x2', '\x30', '\x3', '\x3', '\x2', 
		'\x2', '\x2', '\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x32', '\x33', 
		'\a', '\x12', '\x2', '\x2', '\x33', '\x34', '\x5', '\x2', '\x2', '\x2', 
		'\x34', '\x35', '\a', '\x13', '\x2', '\x2', '\x35', '\x36', '\x5', '\x2', 
		'\x2', '\x2', '\x36', '\x37', '\a', '\x13', '\x2', '\x2', '\x37', '\x38', 
		'\x5', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', '\x6', '\x2', '\x2', 
		'\x39', '\x5', '\x3', '\x2', '\x2', '\x2', ':', ';', '\a', '\x1A', '\x2', 
		'\x2', ';', 'I', '\a', '\x14', '\x2', '\x2', '<', '=', '\a', '\x1A', '\x2', 
		'\x2', '=', '>', '\a', '\x5', '\x2', '\x2', '>', '\x43', '\x5', '\x2', 
		'\x2', '\x2', '?', '@', '\a', '\x13', '\x2', '\x2', '@', '\x42', '\x5', 
		'\x2', '\x2', '\x2', '\x41', '?', '\x3', '\x2', '\x2', '\x2', '\x42', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x44', '\x3', '\x2', '\x2', '\x2', '\x44', '\x46', '\x3', 
		'\x2', '\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x46', 
		'G', '\a', '\x6', '\x2', '\x2', 'G', 'I', '\x3', '\x2', '\x2', '\x2', 
		'H', ':', '\x3', '\x2', '\x2', '\x2', 'H', '<', '\x3', '\x2', '\x2', '\x2', 
		'I', '\a', '\x3', '\x2', '\x2', '\x2', 'J', 'K', '\t', '\x6', '\x2', '\x2', 
		'K', '\t', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x1A', '\x2', 
		'\x2', 'M', '\v', '\x3', '\x2', '\x2', '\x2', '\a', '\x19', '-', '/', 
		'\x43', 'H',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
